[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://mfgicddq4it"]

[sub_resource type="Shader" id="Shader_g5qxn"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform vec4 fresnel_color : source_color;
uniform vec4 inner_fresnel_color : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_emission : source_color, hint_default_black, filter_linear_mipmap, repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy : hint_range(0.0, 10000.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
}

vec3 fresnel_glow(float amount, float intensity, vec3 color, vec3 normal, vec3 view)
{
	return pow((1.0 - dot(normalize(normal), normalize(view))), amount) * color * intensity;
}

void fragment() {
	NORMAL = normalize(NORMAL);
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	//vec3 fresnel = fresnel_glow(8.0, 100.0, fresnel_color.rgb, NORMAL, VIEW);
	float fresnel_factor = pow((1.0 - dot(normalize(NORMAL), normalize(VIEW))), 86.0);
	float fresnel_inner_factor = pow((1.0 - dot(normalize(NORMAL), normalize(VIEW))), 32.0);
	float emission_mask = 1.0;
	if (fresnel_factor > 0.0) {
	    emission_mask = 0.0;
	}

	float eyemission_mask = 1.0;
	if (fresnel_inner_factor > 0.0) {
	    eyemission_mask = 0.0;
	}
	ALBEDO += fresnel_color.rgb * (1.0 - emission_mask) + inner_fresnel_color.rgb * (1.0 - eyemission_mask);

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Emission: Enabled
	vec3 emission_tex = texture(texture_emission, base_uv).rgb;

	// Emission Operator: Add
	EMISSION = (emission.rgb + emission_tex) * emission_energy * emission_mask * (1.0 - eyemission_mask);
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_g5qxn")
shader_parameter/albedo = Color(0, 0, 0, 1)
shader_parameter/fresnel_color = Color(0.777205, 3.36915e-07, 0.43768, 1)
shader_parameter/inner_fresnel_color = Color(0, 0, 0, 1)
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 0.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = Vector4(0, 0, 0, 0)
shader_parameter/specular = 0.0
shader_parameter/metallic = 0.0
shader_parameter/emission = Color(1, 1, 1, 1)
shader_parameter/emission_energy = 10000.0
shader_parameter/uv1_scale = Vector3(0, 0, 0)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(0, 0, 0)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
