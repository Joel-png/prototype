[gd_resource type="ShaderMaterial" load_steps=7 format=3 uid="uid://dkfljf0w8mh4r"]

[ext_resource type="FastNoiseLite" uid="uid://bmyyailayvrul" path="res://Materials/sand_noise.tres" id="1_la84d"]

[sub_resource type="Shader" id="Shader_tpoux"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform vec4 sand_color: source_color; // Sand base color
uniform float grain_scale : hint_range(0.1, 1000.0) = 2.0; // Scale of the sand grains
uniform float roughness : hint_range(0.0, 1.0) = 0.8; // Surface roughness
uniform float metallic : hint_range(0.0, 1.0) = 0.0; // Metallic factor
uniform float specular_power : hint_range(0.0, 1.0) = 0.0;
uniform float specular_strength : hint_range(0.0, 1.0) = 0.0;
uniform vec4 specular_color : source_color;
uniform sampler2D normal_texture; // Noise texture for grains
uniform sampler2D no_map_normal_texture; // Noise texture for grains
uniform sampler2D noise_texture; // Noise texture for grains


uniform vec4 rim_color : source_color = vec4(1.0, 1.0, 1.0, 1.0); // Color of the rim light
uniform float rim_intensity : hint_range(0.0, 5.0) = 1.5; // Intensity of the rim light
uniform float rim_width : hint_range(0.0, 5.0) = 1.0; // Width of the rim light

void fragment() {
	vec2 uv = UV * grain_scale;
    
    vec3 base_color = sand_color.rgb;
	vec3 normalnormal = normalize(NORMAL + texture(normal_texture, uv).rgb * 2.0 - 1.0);
	vec3 normal = texture(normal_texture, uv).rgb * 2.0 - 1.0;
	vec3 perturbed_normal = normalize(NORMAL + normal * 1.0);
	float normal_view_dot = dot(normal, VIEW);
	float nomap_normal_view_dot = dot(texture(no_map_normal_texture, uv).rgb * 2.0 - 1.0, VIEW);
	
	float rim = max(0.0, (1.0 - nomap_normal_view_dot) * 1.5);
	rim = pow(rim, rim_width) * rim_intensity;
	rim = smoothstep(0.1, 0.2, rim);

    // Apply noise for sand grains
    float grain = texture(noise_texture, uv).r;

    // Adjust grain intensity
    grain = smoothstep(0.4, 1.0, grain); // Creates a soft grain pattern

    // Combine base color with grain effect
	vec3 final_color = (base_color + rim * rim_color.rgb) * (0.7 * grain);

    // Set material properties
    ALBEDO = final_color;
    ROUGHNESS = roughness;
    METALLIC = metallic;
	//SPECULAR = texture(noise_texture, uv).r * 0.1 * rim;
	NORMAL = normalnormal;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_cm0qb"]
noise_type = 2
frequency = 0.0568
fractal_type = 0
cellular_distance_function = 1
cellular_jitter = 1.09

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_725mp"]
width = 1024
height = 1024
invert = true
generate_mipmaps = false
seamless_blend_skirt = 0.0
as_normal_map = true
bump_strength = 32.0
noise = SubResource("FastNoiseLite_cm0qb")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_cqun7"]
width = 1024
height = 1024
bump_strength = 32.0
noise = ExtResource("1_la84d")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_k643h"]
width = 1024
height = 1024
as_normal_map = true
bump_strength = 32.0
noise = ExtResource("1_la84d")

[resource]
render_priority = 0
shader = SubResource("Shader_tpoux")
shader_parameter/sand_color = Color(0.808998, 0.808998, 0.808998, 1)
shader_parameter/grain_scale = 400.0
shader_parameter/roughness = 0.0
shader_parameter/metallic = 0.0
shader_parameter/specular_power = 0.0
shader_parameter/specular_strength = 0.0
shader_parameter/specular_color = Color(1, 1, 1, 1)
shader_parameter/rim_color = Color(1, 1, 1, 1)
shader_parameter/rim_intensity = 0.269
shader_parameter/rim_width = 1.129
shader_parameter/normal_texture = SubResource("NoiseTexture2D_k643h")
shader_parameter/no_map_normal_texture = SubResource("NoiseTexture2D_725mp")
shader_parameter/noise_texture = SubResource("NoiseTexture2D_cqun7")
